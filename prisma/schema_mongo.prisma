// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  threads       Thread[]
  comments      Comment[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Board {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique()
  description String
  threads     Thread[]
}

model Thread {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  author    User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject   String?
  text      String?
  image     String
  timestamp DateTime
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String    @db.ObjectId
  comments  Comment[]
  updatedAt DateTime?
  userId    String?   @db.ObjectId
  ip        String?
  deleted   Boolean   @default(false)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  author    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  text      String?
  image     String?
  timestamp DateTime
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String   @db.ObjectId
  userId    String?  @db.ObjectId
  ip        String?
  deleted   Boolean  @default(false)
}
